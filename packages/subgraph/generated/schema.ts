// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class GM extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save GM entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GM entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GM", id.toString(), this);
  }

  static load(id: string): GM | null {
    return store.get("GM", id) as GM | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get expiresAt(): BigInt {
    let value = this.get("expiresAt");
    return value.toBigInt();
  }

  set expiresAt(value: BigInt) {
    this.set("expiresAt", Value.fromBigInt(value));
  }

  get ipfsHash(): string | null {
    let value = this.get("ipfsHash");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ipfsHash(value: string | null) {
    if (value === null) {
      this.unset("ipfsHash");
    } else {
      this.set("ipfsHash", Value.fromString(value as string));
    }
  }

  get originalOwner(): string {
    let value = this.get("originalOwner");
    return value.toString();
  }

  set originalOwner(value: string) {
    this.set("originalOwner", Value.fromString(value));
  }

  get currentOwner(): string {
    let value = this.get("currentOwner");
    return value.toString();
  }

  set currentOwner(value: string) {
    this.set("currentOwner", Value.fromString(value));
  }

  get partner(): string | null {
    let value = this.get("partner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set partner(value: string | null) {
    if (value === null) {
      this.unset("partner");
    } else {
      this.set("partner", Value.fromString(value as string));
    }
  }

  get state(): string {
    let value = this.get("state");
    return value.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (value === null) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(value as BigInt));
    }
  }
}

export class GMPair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save GMPair entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GMPair entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GMPair", id.toString(), this);
  }

  static load(id: string): GMPair | null {
    return store.get("GMPair", id) as GMPair | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get gm1(): string {
    let value = this.get("gm1");
    return value.toString();
  }

  set gm1(value: string) {
    this.set("gm1", Value.fromString(value));
  }

  get wallet1(): string {
    let value = this.get("wallet1");
    return value.toString();
  }

  set wallet1(value: string) {
    this.set("wallet1", Value.fromString(value));
  }

  get gm2(): string | null {
    let value = this.get("gm2");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set gm2(value: string | null) {
    if (value === null) {
      this.unset("gm2");
    } else {
      this.set("gm2", Value.fromString(value as string));
    }
  }

  get wallet2(): string | null {
    let value = this.get("wallet2");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set wallet2(value: string | null) {
    if (value === null) {
      this.unset("wallet2");
    } else {
      this.set("wallet2", Value.fromString(value as string));
    }
  }

  get isCompleted(): boolean {
    let value = this.get("isCompleted");
    return value.toBoolean();
  }

  set isCompleted(value: boolean) {
    this.set("isCompleted", Value.fromBoolean(value));
  }
}

export class Wallet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Wallet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Wallet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Wallet", id.toString(), this);
  }

  static load(id: string): Wallet | null {
    return store.get("Wallet", id) as Wallet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get gms(): Array<string> {
    let value = this.get("gms");
    return value.toStringArray();
  }

  set gms(value: Array<string>) {
    this.set("gms", Value.fromStringArray(value));
  }
}
